#面向对象与函数式方法
	面向对象
		面向对象编程的主要目标是问题分解。
		面向对象方法将问题分解成多组"名词"或对象。
		在一个面向对象系统的内部，对象间的交互会引起各个对象内部状态的变化，而整个系统的状态转变则是由许许多多小的、细微的状态变化混合来形成的。这些相互关联的状态变化形成了一个概念上的"变化网"。当需要了解其带来的微妙且广泛的状态变化时，这种困惑就会成为一个问题。
	函数式方法
		函数式方法将相同的问题分解成多组＂动词＂或函数。
		函数式系统努力减少可见的状态修改。
			因此，向一个函数式系统添加新功能就成了理解如何在局限的上下文环境中--无破坏性的数据转换（例如原始数据永不会发生变化）--来实现新的函数。
		函数式编程以命令式的方式构建系统，并通过将显性的状态改变缩减到最小来变得更加模块化。
		实际中的函数式编程并不以消除状态为主要目的，而是将任何已知系统中突变的出现尽量压缩到最小区域中去。
	两者关系
		函数式风格和面向对象风格并不是对立关系，如何平衡是一件需要技巧的事情。
#以函数为抽象单元
	将具体的实现提取出来，抽象为一个函数。
#封装与隐藏
	封装是面向对象的基石。
	封装是指一种将若干个数据与用来操纵它们的特定操作包装起来的方式。
	JavaScript的对象系统没有提供直接隐藏数据的方式，而是使用闭包来隐藏数据。
#以函数为行为单位
	隐藏数据和行为只是一种将函数作为抽象单元的方式。
	另外一种方式是提供一种简单地存储和传递基本行为的离散单元。
	另外一个JavaScript的基本行为单元是比较器。
		总是返回一个布尔值（只会返回true或false）的函数被称为谓词函数。
	高阶函数
		接受一个函数，并返回一个新的函数
#数据抽象
	JavaScript的对象原型模型是一个丰富且基础的数据方案。
	尽管类系统有其长处，但很多时候，一个JavaScript应用程序的数据需求比类中的简单得多。
	从历史上看，函数式编程已经致力于构建能够实现更高层次行为以及能够工作在非常简单的数据结构上的函数。
	JavaScript的核心数据结构 VS 基于类的数据结构
		使用JavaScript的原始数据、对象和数组，以及目前由类创建的大部分数据模型任务都属于一个范畴。
		数组和对象这两种简单数据类型的灵活性是惊人的，但却常因为基于类的系统而被忽视。
		实施和使用的简易性是使用JavaScript的核心数据结构进行数据建模的目的。
	以处理集合为中心的函数式方式更适合处理与人有关的数据，而面向对象的方法最适合模拟人。
#函数式JavaScript初试
#加速
	
